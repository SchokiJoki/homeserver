version: "3.9"

services:
  # 🧠 Redis (Message-Broker)
  broker:
    image: docker.io/library/redis:8
    container_name: paperless-broker
    restart: unless-stopped
    volumes:
      - /srv/backup/A/paperless/redisdata:/data
    networks:
      - proxy

  # 🗃️ PostgreSQL-Datenbank
  db:
    image: docker.io/library/postgres:17
    container_name: paperless-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: paperless
      POSTGRES_USER: paperless
      POSTGRES_PASSWORD: paperless
    volumes:
      - /srv/backup/A/paperless/pgdata:/var/lib/postgresql/data
    networks:
      - proxy

  # 🌐 Paperless-NGX Webserver (ohne offenen Port)
  webserver:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless-web
    restart: unless-stopped
    depends_on:
      - db
      - broker
    env_file: .env
    environment:
      PAPERLESS_REDIS: redis://broker:6379
      PAPERLESS_DBHOST: db
    volumes:
      - /srv/backup/A/paperless/data:/usr/src/paperless/data
      - /srv/backup/A/paperless/media:/usr/src/paperless/media
      - /srv/backup/A/paperless/export:/usr/src/paperless/export
      - /srv/backup/A/paperless/consume:/usr/src/paperless/consume
    networks:
      - proxy

    labels:
      # 🔐 Traefik HTTPS-Integration
      - "traefik.enable=true"
      - "traefik.http.routers.paperless.rule=Host(`paperless.home`)"
      - "traefik.http.routers.paperless.entrypoints=websecure"
      - "traefik.http.routers.paperless.tls=true"

      # Internes Routing zu Paperless-Port
      - "traefik.http.services.paperless.loadbalancer.server.port=8000"
      - "traefik.http.services.paperless.loadbalancer.server.scheme=http"

      # Optional: wenn du mkcert oder smallstep nutzt
      # - "traefik.http.routers.paperless.tls.certresolver=myresolver"

# 📦 Alle Daten persistent unter /srv/backup/A/paperless/
# Keine internen Docker-Volumes nötig, da absolute Pfade genutzt werden

networks:
  proxy:
    external: true
