#!/bin/bash
set -euo pipefail

normalize_boolean() {
  local value="${1:-1}"
  if [[ "${value}" =~ ^([Nn]o|0|false|FALSE|off|OFF)$ ]]; then
    echo 0
  else
    echo 1
  fi
}

# Defaults for admin account and logging
CUPS_ADMIN_USER=${CUPS_ADMIN_USER:-${CUPSADMIN:-admin}}
CUPS_ADMIN_PASSWORD=${CUPS_ADMIN_PASSWORD:-${CUPSPASSWORD:-admin}}
CUPS_LOG_LEVEL=${CUPS_LOG_LEVEL:-info}
CUPS_MAX_LOG_SIZE=${CUPS_MAX_LOG_SIZE:-0}
CUPS_LISTEN_PORT=${CUPS_LISTEN_PORT:-631}
CUPS_WEB_INTERFACE=${CUPS_WEB_INTERFACE:-Yes}
CUPS_BROWSING=${CUPS_BROWSING:-On}
CUPS_BROWSE_PROTOCOLS=${CUPS_BROWSE_PROTOCOLS:-dnssd}
CUPS_ALLOW_FROM=${CUPS_ALLOW_FROM:-@LOCAL}
CUPS_ADMIN_ALLOW_FROM=${CUPS_ADMIN_ALLOW_FROM:-@LOCAL}
CUPS_DEFAULT_SHARED=${CUPS_DEFAULT_SHARED:-Yes}
CUPS_DEFAULT_ENCRYPTION=${CUPS_DEFAULT_ENCRYPTION:-IfRequested}
CUPS_SERVER_ALIAS=${CUPS_SERVER_ALIAS:-*}

ENABLE_MOPRIA_RAW=${ENABLE_MOPRIA:-${CUPS_ENABLE_MOPRIA:-1}}
ENABLE_MOPRIA=$(normalize_boolean "${ENABLE_MOPRIA_RAW}")

# Backwards compatibility with legacy linuxserver.io variables
if [[ -n "${CUPSREMOTEANY:-}" ]]; then
  if [[ "${CUPSREMOTEANY}" =~ ^([Yy]es|1|true|TRUE)$ ]]; then
    CUPS_ALLOW_FROM="all"
  else
    CUPS_ALLOW_FROM="@LOCAL"
  fi
fi

if [[ -n "${CUPSREMOTEADMIN:-}" ]]; then
  if [[ "${CUPSREMOTEADMIN}" =~ ^([Yy]es|1|true|TRUE)$ ]]; then
    CUPS_ADMIN_ALLOW_FROM="all"
  else
    CUPS_ADMIN_ALLOW_FROM="@LOCAL"
  fi
fi

if [[ -n "${CUPSBROWSE:-}" ]]; then
  if [[ "${CUPSBROWSE}" =~ ^([Yy]es|1|true|TRUE)$ ]]; then
    CUPS_BROWSING="On"
  else
    CUPS_BROWSING="Off"
  fi
fi

if [[ -n "${CUPSSHAREPRINTERS:-}" ]]; then
  if [[ "${CUPSSHAREPRINTERS}" =~ ^([Yy]es|1|true|TRUE)$ ]]; then
    CUPS_DEFAULT_SHARED="Yes"
  else
    CUPS_DEFAULT_SHARED="No"
  fi
fi

# Printer defaults
PRINTER_NAME=${PRINTER_NAME:-Kyocera_ECOSYS_P2040dn}
PRINTER_INFO=${PRINTER_INFO:-Kyocera ECOSYS P2040dn}
PRINTER_LOCATION=${PRINTER_LOCATION:-Home Office}
PRINTER_DEVICE_URI=${PRINTER_DEVICE_URI:-socket://kyocera-ecosys-p2040dn:9100}
PRINTER_UUID=${PRINTER_UUID:-urn:uuid:Kyocera-ECOSYS-P2040dn}
PRINTER_DEFAULT_MEDIA=${PRINTER_DEFAULT_MEDIA:-A4}
PRINTER_DUPLEX=${PRINTER_DUPLEX:-DuplexNoTumble}
PRINTER_IS_SHARED=${PRINTER_IS_SHARED:-}
PRINTER_ACCEPTING=${PRINTER_ACCEPTING:-Yes}

if [[ -z "${PRINTER_IS_SHARED}" ]]; then
  PRINTER_IS_SHARED=${CUPS_DEFAULT_SHARED}
fi

if [[ "${PRINTER_ACCEPTING}" =~ ^([Yy]es|1|true|TRUE)$ ]]; then
  PRINTER_ACCEPTING="Yes"
else
  PRINTER_ACCEPTING="No"
fi

if [[ "${PRINTER_IS_SHARED}" =~ ^([Yy]es|1|true|TRUE)$ ]]; then
  PRINTER_IS_SHARED="Yes"
else
  PRINTER_IS_SHARED="No"
fi

DEFAULT_HOSTNAME=$(hostname -f 2>/dev/null || hostname 2>/dev/null || echo "localhost")
if [[ -z "${CUPS_SERVER_NAME:-}" || "${CUPS_SERVER_NAME}" == "*" ]]; then
  if [[ -n "${CUPS_SERVER_ALIAS}" && "${CUPS_SERVER_ALIAS}" != "*" ]]; then
    CUPS_SERVER_NAME=${CUPS_SERVER_ALIAS%% *}
  else
    CUPS_SERVER_NAME=${DEFAULT_HOSTNAME}
  fi
fi
MOPRIA_SERVICE_NAME=${MOPRIA_SERVICE_NAME:-${PRINTER_INFO}}
MOPRIA_TXT_NOTE=${MOPRIA_TXT_NOTE:-${PRINTER_LOCATION}}
MOPRIA_TXT_PRODUCT=${MOPRIA_TXT_PRODUCT:-(${PRINTER_INFO})}
MOPRIA_TXT_PDL=${MOPRIA_TXT_PDL:-application/pdf,image/jpeg}
MOPRIA_TXT_TXTVERS=${MOPRIA_TXT_TXTVERS:-1}
MOPRIA_TXT_QTOTAL=${MOPRIA_TXT_QTOTAL:-1}
MOPRIA_TXT_PRIORITY=${MOPRIA_TXT_PRIORITY:-0}
MOPRIA_TXT_RP=${MOPRIA_TXT_RP:-printers/${PRINTER_NAME}}
MOPRIA_ADMIN_HOST=${MOPRIA_ADMIN_HOST:-${DEFAULT_HOSTNAME}}
MOPRIA_TXT_ADMINURL=${MOPRIA_TXT_ADMINURL:-http://${MOPRIA_ADMIN_HOST}:${CUPS_LISTEN_PORT}/printers/${PRINTER_NAME}}

if [[ -z "${MOPRIA_TXT_COLOR:-}" ]]; then
  MOPRIA_TXT_COLOR=F
fi

if [[ -z "${MOPRIA_TXT_DUPLEX:-}" ]]; then
  if [[ "${PRINTER_DUPLEX,,}" =~ (none|off|simplex|false|0) ]]; then
    MOPRIA_TXT_DUPLEX=F
  else
    MOPRIA_TXT_DUPLEX=T
  fi
fi

generate_cupsd_conf() {
  cat > /etc/cups/cupsd.conf <<EOF
# Autogenerated by entrypoint.sh for Kyocera ECOSYS P2040dn
LogLevel ${CUPS_LOG_LEVEL}
MaxLogSize ${CUPS_MAX_LOG_SIZE}
User root
Group lp
SystemGroup lpadmin root
Listen 0.0.0.0:${CUPS_LISTEN_PORT}
Listen /run/cups/cups.sock
DefaultAuthType Basic
WebInterface ${CUPS_WEB_INTERFACE}
Browsing ${CUPS_BROWSING}
BrowseLocalProtocols ${CUPS_BROWSE_PROTOCOLS}
DefaultShared ${CUPS_DEFAULT_SHARED}
ServerName ${CUPS_SERVER_NAME}
ServerAlias ${CUPS_SERVER_ALIAS}
DefaultEncryption ${CUPS_DEFAULT_ENCRYPTION}
AccessLog /var/log/cups/access_log
ErrorLog /var/log/cups/error_log
PageLog /var/log/cups/page_log

<Location />
  Order allow,deny
  Allow ${CUPS_ALLOW_FROM}
</Location>

<Location /admin>
  AuthType Default
  Require user @SYSTEM
  Order allow,deny
  Allow ${CUPS_ADMIN_ALLOW_FROM}
</Location>

<Location /admin/conf>
  AuthType Default
  Require user @SYSTEM
  Order allow,deny
  Allow ${CUPS_ADMIN_ALLOW_FROM}
</Location>

<Location /admin/log>
  AuthType Default
  Require user @SYSTEM
  Order allow,deny
  Allow ${CUPS_ADMIN_ALLOW_FROM}
</Location>

<Policy default>
  <Limit Create-Job Print-Job Print-URI>
    Require user @OWNER @SYSTEM
    Order deny,allow
  </Limit>
  <Limit Pause-Printer Resume-Printer Enable-Printer Disable-Printer>
    Require user @SYSTEM
    Order deny,allow
  </Limit>
  <Limit All>
    Order deny,allow
  </Limit>
</Policy>

Include /etc/cups/printers.conf
Include /etc/cups/classes.conf
EOF
}

generate_printers_conf() {
  cat > /etc/cups/printers.conf <<EOF
<Printer ${PRINTER_NAME}>
  UUID ${PRINTER_UUID}
  Info ${PRINTER_INFO}
  Location ${PRINTER_LOCATION}
  MakeModel Kyocera ECOSYS P2040dn (KPDL)
  DeviceURI ${PRINTER_DEVICE_URI}
  State Idle
  StateTime 0
  Accepting ${PRINTER_ACCEPTING}
  Shared ${PRINTER_IS_SHARED}
  JobSheets none none
  QuotaPeriod 0
  PageLimit 0
  KLimit 0
  OpPolicy default
  ErrorPolicy retry-job
  PPD /etc/cups/ppd/${PRINTER_NAME}.ppd
  Option media ${PRINTER_DEFAULT_MEDIA}
  Option PageSize ${PRINTER_DEFAULT_MEDIA}
  Option Duplex ${PRINTER_DUPLEX}
</Printer>
EOF
}

ensure_global_directive() {
  local file="$1"
  local directive="$2"
  local value="$3"

  local tmp
  tmp=$(mktemp)
  trap 'rm -f "$tmp"' RETURN

  awk -v directive="$directive" -v value="$value" '
    BEGIN {
      replaced = 0
      pattern = "^[[:space:]]*" directive "[[:space:]]+"
    }
    $0 ~ pattern {
      if (!replaced) {
        print directive " " value
        replaced = 1
      }
      next
    }
    { print }
    END {
      if (!replaced)
        print directive " " value
    }
  ' "$file" > "$tmp"

  mv "$tmp" "$file"
  trap - RETURN
}

configure_mopria_service() {
  if [[ "${ENABLE_MOPRIA}" == "1" ]]; then
    mkdir -p /etc/avahi/services
    cat > /etc/avahi/services/mopria.service <<EOF
<?xml version="1.0" standalone='no'?>
<!DOCTYPE service-group SYSTEM "avahi-service.dtd">
<service-group>
  <name replace-wildcards="yes">${MOPRIA_SERVICE_NAME}</name>
  <service>
    <type>_ipp._tcp</type>
    <subtype>_print._sub._ipp._tcp</subtype>
    <port>${CUPS_LISTEN_PORT}</port>
    <txt-record>txtvers=${MOPRIA_TXT_TXTVERS}</txt-record>
    <txt-record>qtotal=${MOPRIA_TXT_QTOTAL}</txt-record>
    <txt-record>rp=${MOPRIA_TXT_RP}</txt-record>
    <txt-record>ty=${PRINTER_INFO}</txt-record>
    <txt-record>note=${MOPRIA_TXT_NOTE}</txt-record>
    <txt-record>priority=${MOPRIA_TXT_PRIORITY}</txt-record>
    <txt-record>product=${MOPRIA_TXT_PRODUCT}</txt-record>
    <txt-record>adminurl=${MOPRIA_TXT_ADMINURL}</txt-record>
    <txt-record>UUID=${PRINTER_UUID}</txt-record>
    <txt-record>pdl=${MOPRIA_TXT_PDL}</txt-record>
    <txt-record>Color=${MOPRIA_TXT_COLOR}</txt-record>
    <txt-record>Duplex=${MOPRIA_TXT_DUPLEX}</txt-record>
  </service>
  <service>
    <type>_ipps._tcp</type>
    <subtype>_print._sub._ipps._tcp</subtype>
    <port>${CUPS_LISTEN_PORT}</port>
    <txt-record>txtvers=${MOPRIA_TXT_TXTVERS}</txt-record>
    <txt-record>qtotal=${MOPRIA_TXT_QTOTAL}</txt-record>
    <txt-record>rp=${MOPRIA_TXT_RP}</txt-record>
    <txt-record>ty=${PRINTER_INFO}</txt-record>
    <txt-record>note=${MOPRIA_TXT_NOTE}</txt-record>
    <txt-record>priority=${MOPRIA_TXT_PRIORITY}</txt-record>
    <txt-record>product=${MOPRIA_TXT_PRODUCT}</txt-record>
    <txt-record>adminurl=${MOPRIA_TXT_ADMINURL}</txt-record>
    <txt-record>UUID=${PRINTER_UUID}</txt-record>
    <txt-record>pdl=${MOPRIA_TXT_PDL}</txt-record>
    <txt-record>Color=${MOPRIA_TXT_COLOR}</txt-record>
    <txt-record>Duplex=${MOPRIA_TXT_DUPLEX}</txt-record>
  </service>
</service-group>
EOF
  else
    rm -f /etc/avahi/services/mopria.service
  fi
}

start_mopria_discovery() {
  if [[ "${ENABLE_MOPRIA}" == "1" ]]; then
    mkdir -p /run/dbus
    if [[ -f /run/dbus/pid ]]; then
      rm -f /run/dbus/pid
    fi
    if [[ -S /run/dbus/system_bus_socket ]]; then
      rm -f /run/dbus/system_bus_socket
    fi
    dbus-daemon --system --fork

    mkdir -p /run/avahi-daemon
    if [[ -f /run/avahi-daemon/pid ]]; then
      rm -f /run/avahi-daemon/pid
    fi
    if [[ -S /run/avahi-daemon/socket ]]; then
      rm -f /run/avahi-daemon/socket
    fi
    avahi-daemon --daemonize --no-chroot
  fi
}

# Ensure basic directories exist with correct ownership
mkdir -p /etc/cups/ppd /var/log/cups /var/spool/cups /run/cups
chown -R root:lp /etc/cups /var/log/cups /var/spool/cups
chown root:lp /run/cups
chmod 755 /etc/cups /var/log/cups /var/spool/cups /run/cups

# Generate cupsd.conf if missing or regeneration requested
if [[ ! -f /etc/cups/cupsd.conf ]] || [[ "${FORCE_CUPSD_CONF:-0}" == "1" ]]; then
  generate_cupsd_conf
fi

if [[ -f /etc/cups/cupsd.conf ]]; then
  tmp_conf=$(mktemp)
  trap 'rm -f "$tmp_conf"' EXIT
  awk -v port="${CUPS_LISTEN_PORT}" -v alias="${CUPS_SERVER_ALIAS}" -v sname="${CUPS_SERVER_NAME}" '
    function emit_missing() {
      if (globals_emitted)
        return
      if (!servername_printed)
        print "ServerName " sname
      if (!serveralias_printed)
        print "ServerAlias " alias
      if (!listen_host_printed)
        print "Listen 0.0.0.0:" port
      if (!listen_socket_printed)
        print "Listen /run/cups/cups.sock"
      globals_emitted = 1
    }

    BEGIN {
      if (port == "")
        port = "631"
      if (sname == "")
        sname = "localhost"
    }

    {
      line = $0
      if (!globals_emitted) {
        if (match(line, /^[[:space:]]*ServerName[[:space:]]+/)) {
          print "ServerName " sname
          servername_printed = 1
          next
        }
        if (match(line, /^[[:space:]]*ServerAlias[[:space:]]+/)) {
          print "ServerAlias " alias
          serveralias_printed = 1
          next
        }
        if (match(line, /^[[:space:]]*Listen[[:space:]]+0\.0\.0\.0:/)) {
          print "Listen 0.0.0.0:" port
          listen_host_printed = 1
          next
        }
        if (match(line, /^[[:space:]]*Listen[[:space:]]+\/run\/cups\/cups\.sock/)) {
          print "Listen /run/cups/cups.sock"
          listen_socket_printed = 1
          next
        }
        if (match(line, /^[[:space:]]*</))
          emit_missing()
      }

      print line
    }

    END {
      emit_missing()
    }
  ' /etc/cups/cupsd.conf > "${tmp_conf}"

  mv "${tmp_conf}" /etc/cups/cupsd.conf
  trap - EXIT
fi

if [[ -f /etc/cups/cupsd.conf ]]; then
  ensure_global_directive "/etc/cups/cupsd.conf" "ServerName" "${CUPS_SERVER_NAME}"
  ensure_global_directive "/etc/cups/cupsd.conf" "ServerAlias" "${CUPS_SERVER_ALIAS}"
fi

# Generate printers.conf if missing or regeneration requested
if [[ ! -f /etc/cups/printers.conf ]] || [[ "${FORCE_PRINTERS_CONF:-0}" == "1" ]]; then
  generate_printers_conf
fi

# Copy the Kyocera PPD into place if not already available
if [[ ! -f "/etc/cups/ppd/${PRINTER_NAME}.ppd" ]] || [[ "${FORCE_PPD_OVERWRITE:-0}" == "1" ]]; then
  cp /opt/cups/ppd/Kyocera_ECOSYS_P2040dn.ppd "/etc/cups/ppd/${PRINTER_NAME}.ppd"
fi

chmod 644 /etc/cups/cupsd.conf
chmod 640 /etc/cups/printers.conf
chmod 644 "/etc/cups/ppd/${PRINTER_NAME}.ppd"
chown root:lp /etc/cups/cupsd.conf /etc/cups/printers.conf "/etc/cups/ppd/${PRINTER_NAME}.ppd"

# Create administrative user
if ! id "${CUPS_ADMIN_USER}" >/dev/null 2>&1; then
  useradd -M -s /usr/sbin/nologin "${CUPS_ADMIN_USER}"
fi
usermod -a -G lpadmin "${CUPS_ADMIN_USER}"
echo "${CUPS_ADMIN_USER}:${CUPS_ADMIN_PASSWORD}" | chpasswd

# Make sure the default printer is registered for lp commands
if [[ ! -f /etc/cups/lpoptions ]] || ! grep -q "Default ${PRINTER_NAME}" /etc/cups/lpoptions; then
  echo "Default ${PRINTER_NAME}" > /etc/cups/lpoptions
  chown root:lp /etc/cups/lpoptions
  chmod 644 /etc/cups/lpoptions
fi

configure_mopria_service
start_mopria_discovery

exec "$@"
